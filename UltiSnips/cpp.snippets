global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet for "for" b
for($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet fore "for (each)" b
for ($1 : $2)`!p nl(snip)`{
	$0
}
endsnippet

snippet dow "Do While" b
do{
	$1
}while($0);
endsnippet

snippet while "while" b
while($1){
	$0
}
endsnippet

snippet if "if" b
if($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet elseif "else" b
else if($1){
	$0
}
endsnippet

snippet else "else" b
else{
	$0
}
endsnippet

snippet sw "switch" b
switch ($1)`!p nl(snip)`{
	case $2: $0
}
endsnippet


snippet pr "private" b
private $0
endsnippet

snippet pu "public" b
public $0
endsnippet

snippet re "return" b
return $0
endsnippet

snippet st "static"
static $0
endsnippet

snippet br "break"
break;
endsnippet

snippet iiun "include & using"
#include <iostream>
$1
using namespace std;
$0
endsnippet

snippet incl "include"
#include <$1>
$0
endsnippet

snippet incl" "include comilla"
#include "$1"
$0
endsnippet

snippet col "cout+endl" b
cout << $1 << endl;
endsnippet

snippet col" "cout+endl" b
cout << "$1" << endl;
endsnippet

snippet ci "cin" b
cin >> $0;
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3){
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

snippet main "main" b
int main(int argc, char *argv[]){
	$1
	return 0;
}
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

