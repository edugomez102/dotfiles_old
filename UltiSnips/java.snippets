global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet for "for" b
for($1; $2; $3) {
	$0
}
endsnippet

snippet fori "for loop (for)"
for(int ${1:i} = ${2:0}; $1 ${3:< count}; ${4:$1}${5:++}) {
	${VISUAL}$0
}
endsnippet

snippet fore "for (each)" b
for ($1 : $2) {
	$0
}
endsnippet

snippet dow "Do While" b
do{
	$1
}while($0);
endsnippet

snippet while "while" b
while($1) {
	$0
}
endsnippet

snippet if "if" b
if($1) {
	$0${VISUAL}
}
endsnippet

snippet eli "else if" b
else if($1) {
	$0
}
endsnippet

snippet else "else" b
else{
	$0
}
endsnippet

snippet sw "switch" b
switch ($1) {
	case $2: $0
}
endsnippet

snippet pr "private" b
private $0
endsnippet

snippet pu "public" b
public $0
endsnippet

snippet re "return" b
return $0
endsnippet

snippet st "static"
static $0
endsnippet

snippet br "break"
break;
endsnippet

snippet pa "package" b
package $0
endsnippet

snippet p "print" b
System.out.print($1);$0
endsnippet

snippet pl "println"  b
System.out.println($1);$0
endsnippet

snippet pl" "println"  b
System.out.println("$1");$0
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3) {
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

snippet main "main" b
public static void main(String[] args) {
	$0
}
endsnippet

snippet class "class" b
${1:public} class ${2:class_name}{
	${VISUAL}$0
}
endsnippet

snippet arl "ArrayList" i
ArrayList<$1>$0
endsnippet

snippet it "Iterator" i
Iterator<$1>$0
endsnippet

snippet itw "while Iterator" b
while(${1:it}.hasNext()) {
	${2:it.next();}
}
endsnippet

snippet ts "TreeSet" i
TreeSet<$1>$0
endsnippet

snippet tm "TreeMap" i
TreeMap<$1>$0	
endsnippet

snippet im "import"  b
import ${1:java}.${2:util}.$0;
endsnippet

snippet try "try/catch" b
try {
	$1${VISUAL}
} catch(${2:Exception} ${3:e}) {
	${4:e.printStackTrace();}
}
endsnippet

snippet m  "method" b
${1:public} ${2:void} ${3:method}($4) {
	$0
}
endsnippet

snippet ca "catch" b
catch ${1:Exception} ${2:e}`!p nl(snip)`{
	$0
}
endsnippet

snippet todo "todo" b
//TODO(`!v strftime("%d/%m/%Y")`): ${1:implementar} 
endsnippet

snippet preg "Pregunta" b
//Pregunta(`!v strftime("%d/%m/%Y")`): ${1:implementar} 
endsnippet

snippet pcn "public class name" b
${1:public} class ${2:`!p snip.rv = snip.basename or "name"`}{
	${VISUAL}$0
}
endsnippet

snippet sleep "sleep" b
try {
	Thread.sleep(${1:1000});	
} catch(Exception e) {
	e.printStackTrace();
}
$0
endsnippet

